if [[ -f "$HOME/install_user.sh" ]]; then
  echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª install_user.sh. –£–¥–∞–ª—è—é..."
  rm -f "$HOME/install_user.sh"
fi

#!/bin/bash
set -e
export DEBIAN_FRONTEND=noninteractive

CONFIG_FILE="/usr/local/bin/config.json"
KEY_FILE="/usr/local/bin/id_ed25519.pub"
LOG="$HOME/install_user.log"

log() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') | $1" | tee -a "$LOG"
}

log "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $USER"

# === SSH: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ authorized_keys ===
log "üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º .ssh"
if [[ ! -d "$HOME/.ssh" ]]; then
  log "–°–æ–∑–¥–∞—ë–º .ssh"
  mkdir -p "$HOME/.ssh"
else
  log ".ssh —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ"
fi
sudo chmod 700 "$HOME/.ssh"
if [[ ! -f "$HOME/.ssh/authorized_keys" ]]; then
  log "–°–æ–∑–¥–∞—ë–º authorized_keys"
  touch "$HOME/.ssh/authorized_keys"
else
  log "authorized_keys —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ"
fi
sudo chmod 600 "$HOME/.ssh/authorized_keys"
cat "$KEY_FILE" >> "$HOME/.ssh/authorized_keys"

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ ===
if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
PORT=$(jq -r '.port' "$CONFIG_FILE")
if ss -tuln | grep -q ":$PORT"; then
  log "‚ö†Ô∏è –ü–æ—Ä—Ç $PORT —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."
  echo "  [1] –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º –ø–æ—Ä—Ç–æ–º"
  echo "  [2] –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç"
  echo "  [3] –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Ä—Ç–∞"
  read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [1-3]: " choice
  case "$choice" in
    1) log "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∑–∞–Ω—è—Ç—ã–º –ø–æ—Ä—Ç–æ–º (–Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫)" ;;
    2) read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç: " PORT ;;
    3) log "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Ä—Ç–∞" ; SKIP_PORT=1 ;;
    *) echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ." ; exit 1 ;;
  esac
fi
if [[ -z "$SKIP_PORT" ]]; then
  log "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º /etc/ssh/sshd_config"
  sudo sed -i "s/^#\?Port .*/Port $PORT/" /etc/ssh/sshd_config
  sudo sed -i "s/^#\?PermitRootLogin .*/PermitRootLogin no/" /etc/ssh/sshd_config
  sudo sed -i "s/^#\?PasswordAuthentication .*/PasswordAuthentication no/" /etc/ssh/sshd_config
  sudo sed -i "s|^#\?AuthorizedKeysFile .*|AuthorizedKeysFile .ssh/authorized_keys|" /etc/ssh/sshd_config
  sudo systemctl restart ssh
fi

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===

# === –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è sudo ===
log "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º sudo –±–µ–∑ –ø–∞—Ä–æ–ª—è"
echo "$USER ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/90-$USER > /dev/null
sudo chmod 440 /etc/sudoers.d/90-$USER
log "üîí –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è polkit –¥–ª—è –≥—Ä—É–ø–ø—ã sudo"
if [[ ! -f /etc/polkit-1/rules.d/49-nopasswd.rules ]]; then
  sudo mkdir -p /etc/polkit-1/rules.d
  cat <<EOF | sudo tee /etc/polkit-1/rules.d/49-nopasswd.rules > /dev/null
polkit.addRule(function(action, subject) {
  if (subject.isInGroup("sudo")) {
    return polkit.Result.YES;
  }
});
EOF
  sudo systemctl daemon-reexec
  log "‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ polkit –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
else
  log "üîÅ –ü–æ–ª–∏—Ç–∏–∫–∞ polkit —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞"
fi







# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===
set -e

export DEBIAN_FRONTEND=noninteractive

# === secure_install.sh ===
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞: fail2ban, psad, rkhunter, ufw, Telegram, cron

CONFIG_FILE="/usr/local/bin/config.json"
LOG="/var/log/security_setup.log"

log() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') | $1" | tee -a "$LOG"
}

[[ ! -f "$CONFIG_FILE" ]] && echo "–§–∞–π–ª $CONFIG_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω" && exit 1

if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
BOT_TOKEN=$(jq -r '.telegram_bot_token' "$CONFIG_FILE")
if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
CHAT_ID=$(jq -r '.telegram_chat_id' "$CONFIG_FILE")
if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
LABEL=$(jq -r '.telegram_server_label' "$CONFIG_FILE")
if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
CLEAR_LOG_CRON=$(jq -r '.clear_logs_cron' "$CONFIG_FILE")
if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
SECURITY_CHECK_CRON=$(jq -r '.security_check_cron' "$CONFIG_FILE")

log "üõ° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
for SERVICE in ufw fail2ban psad rkhunter; do
if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
  if [[ "$(jq -r ".services.$SERVICE" "$CONFIG_FILE")" == "true" ]]; then
    log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º $SERVICE..."
if ! dpkg -s "$SERVICE" &>/dev/null; then
      sudo apt install -y "$SERVICE"
else
  log "–ü–∞–∫–µ—Ç(—ã) —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: sudo apt install -y "$SERVICE""
fi
    [[ "$SERVICE" != "rkhunter" ]] && systemctl enable --now "$SERVICE" || true
  else
    log "$SERVICE –æ—Ç–∫–ª—é—á—ë–Ω –≤ config.json"
  fi
done

# === –°–æ–∑–¥–∞–Ω–∏–µ security_monitor.sh ===
cat > /usr/local/bin/security_monitor.sh <<EOF

LOG="/var/log/security_monitor.log"
BOT_TOKEN="$BOT_TOKEN"
CHAT_ID="$CHAT_ID"
LABEL="$LABEL"

send() {
  curl -s -X POST "https://api.telegram.org/bot\$BOT_TOKEN/sendMessage" \
    -d chat_id="\$CHAT_ID" \
    -d parse_mode="Markdown" \
    -d text="\$1%0A*Server:* \\`\$LABEL\\`" > /dev/null
}

echo "\$(date '+%F %T') | –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" >> "\$LOG"

if command -v rkhunter &>/dev/null; then
  RKHUNTER_RESULT=\$(rkhunter --configfile /etc/rkhunter.conf --check --sk --nocolors --rwo 2>/dev/null || true)
  [[ -n "\$RKHUNTER_RESULT" ]] && send "‚ö†Ô∏è *RKHunter –Ω–∞—à—ë–ª –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è:*%0A\`\`\`\$RKHUNTER_RESULT\`\`\`"
fi

if command -v psad &>/dev/null; then
  PSAD_RESULT=\$(grep "Danger level" /var/log/psad/alert | tail -n 5 || true)
  [[ -n "\$PSAD_RESULT" ]] && send "üö® *PSAD –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:*%0A\`\`\`\$PSAD_RESULT\`\`\`"
fi

echo "\$(date '+%F %T') | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" >> "\$LOG"
EOF

sudo chmod +x /usr/local/bin/security_monitor.sh

# === clear_security_log.sh ===
cat > /usr/local/bin/clear_security_log.sh <<EOF

echo "\$(date '+%F %T') | –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞" > /var/log/security_monitor.log
EOF
sudo chmod +x /usr/local/bin/clear_security_log.sh

# === notify_login.sh (telegram) ===
cat > /etc/profile.d/notify_login.sh <<'EOF'

BOT_TOKEN="'"$BOT_TOKEN"'"
CHAT_ID="'"$CHAT_ID"'"
LABEL="'"$LABEL"'"
USER_NAME=$(whoami)
IP_ADDR=$(who | awk '{print $5}' | sed 's/[()]//g')
HOSTNAME=$(hostname)
LOGIN_TIME=$(date "+%Y-%m-%d %H:%M:%S")
MESSAGE="üë§ SSH –≤—Ö–æ–¥: *$USER_NAME*%0Aüíª $HOSTNAME%0Aüïí $LOGIN_TIME%0Aüåê IP: \`$IP_ADDR\`%0A*Server:* \`$LABEL\`"
curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
  -d chat_id="$CHAT_ID" \
  -d parse_mode="Markdown" \
  -d text="$MESSAGE" > /dev/null
EOF
sudo chmod +x /etc/profile.d/notify_login.sh

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞ telegram_command_listener ===
if [[ ! -f /etc/systemd/system/telegram_command_listener.service ]]; then
  cat > /etc/systemd/system/telegram_command_listener.service <<EOF
[Unit]
Description=Telegram Command Listener
After=network.target

[Service]
ExecStart=/usr/local/bin/telegram_command_listener.sh
Restart=always
User=root

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reexec
sudo systemctl daemon-reload
if ! systemctl is-enabled telegram_command_listener.service &>/dev/null; then
  sudo systemctl enable --now telegram_command_listener.service
else
  log "–°–µ—Ä–≤–∏—Å telegram_command_listener.service —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cron-–∑–∞–¥–∞—á ===
TEMP_CRON=$(mktemp)
crontab -l 2>/dev/null > "$TEMP_CRON" || true
grep -v 'security_monitor\|clear_security_log' "$TEMP_CRON" > "${TEMP_CRON}.new"
echo "$SECURITY_CHECK_CRON /usr/local/bin/security_monitor.sh" >> "${TEMP_CRON}.new"
echo "$CLEAR_LOG_CRON /usr/local/bin/clear_security_log.sh" >> "${TEMP_CRON}.new"
crontab "${TEMP_CRON}.new"
rm -f "$TEMP_CRON" "${TEMP_CRON}.new"

log "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"

log "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram listener"

if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
BOT_TOKEN=$(jq -r '.telegram_bot_token' "$CONFIG_FILE")
if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
CHAT_ID=$(jq -r '.telegram_chat_id' "$CONFIG_FILE")

cat > /usr/local/bin/telegram_command_listener.sh <<'EOF'
#!/bin/bash

# === telegram_command_listener.sh ===
# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç Telegram-–±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç rkhunter

BOT_TOKEN="__REPLACE_WITH_YOUR_BOT_TOKEN__"
CHAT_ID="__REPLACE_WITH_YOUR_CHAT_ID__"
LOG_FILE="/var/log/telegram_bot.log"
RKHUNTER_LOG="/var/log/rkhunter.log"
TMP_LOG="/tmp/rkhunter_parsed.log"

send_message() {
    local text="$1"
    curl -s -X POST https://api.telegram.org/bot$BOT_TOKEN/sendMessage \
        -d chat_id="$CHAT_ID" \
        -d parse_mode="Markdown" \
        --data-urlencode text="$text"
}

parse_rkhunter_log() {
    echo "üìã *–û—Ç—á—ë—Ç RKHunter (`date +'%Y-%m-%d %H:%M:%S'`)*" > "$TMP_LOG"

    grep -E 'Warning|Possible rootkits|[Ff]iles checked|Rootkits checked|Suspect files|Rootkit checks|Applications checks|System checks summary|Applications checks|File properties checks' "$RKHUNTER_LOG" >> "$TMP_LOG"

    # –û—Ç–ø—Ä–∞–≤–∏–º –ª–æ–≥ –±–æ—Ç–æ–º
    send_message "\`cat $TMP_LOG\`"
}

main_loop() {
    while true; do
        echo "[2025-03-25 23:29:59] Telegram bot listener –∑–∞–ø—É—â–µ–Ω" >> "$LOG_FILE"

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        UPDATES=$(curl -s https://api.telegram.org/bot$BOT_TOKEN/getUpdates)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /security
        if echo "$UPDATES" | grep -q "/security"; then
            send_message "üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å ~1 –º–∏–Ω—É—Ç—É."
            echo "[2025-03-25 23:29:59] üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /security" >> "$LOG_FILE"

            sudo rkhunter --update > /dev/null
            sudo rkhunter --propupd > /dev/null
            sudo rkhunter --check --sk > /dev/null

            parse_rkhunter_log
        fi

        sleep 10
    done
}

main_loop

EOF

sudo chmod +x /usr/local/bin/telegram_command_listener.sh

log "üõ†Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º systemd-—Å–µ—Ä–≤–∏—Å –¥–ª—è Telegram listener"
if [[ ! -f /etc/systemd/system/telegram_command_listener.service ]]; then
  cat > /etc/systemd/system/telegram_command_listener.service <<EOF
[Unit]
Description=Telegram Command Listener
After=network.target

[Service]
ExecStart=/usr/local/bin/telegram_command_listener.sh
Restart=always
User=igrom

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reexec
sudo systemctl daemon-reload
if ! systemctl is-enabled telegram_command_listener.service &>/dev/null; then
  sudo systemctl enable --now telegram_command_listener.service
else
  log "–°–µ—Ä–≤–∏—Å telegram_command_listener.service —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi



log "üê≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker"
if ! command -v docker &>/dev/null; then
if ! dpkg -s docker.io &>/dev/null; then
    sudo apt install -y docker.io
else
  log "–ü–∞–∫–µ—Ç(—ã) —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: sudo apt install -y docker.io"
fi
if ! systemctl is-enabled docker &>/dev/null; then
    sudo systemctl enable --now docker
else
  log "–°–µ—Ä–≤–∏—Å docker —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi
fi
sudo usermod -aG docker "$USER"


log "üìä –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Netdata (–µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"
if ! docker ps | grep -q netdata; then
if ! docker ps | grep -q netdata; then
    docker run -d --name netdata \
else
  log "Netdata —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi
    -p 19999:19999 \
    -v /etc/netdata:/etc/netdata:ro \
    -v /var/lib/netdata:/var/lib/netdata \
    -v /proc:/host/proc:ro \
    -v /sys:/host/sys:ro \
    -v /var/run/docker.sock:/var/run/docker.sock:ro \
    --cap-add SYS_PTRACE \
    --security-opt apparmor=unconfined \
    netdata/netdata
fi


log "‚è± –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
if ! command -v jq &>/dev/null; then echo '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è jq. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.'; exit 1; fi
AUTO_UPDATE_CRON=$(jq -r '.cron_tasks.auto_update' "$CONFIG_FILE")
if [[ ! -f /usr/local/bin/auto_update.sh ]]; then
  cat > /usr/local/bin/auto_update.sh <<EOF
#!/bin/bash
echo "$(date '+%F %T') | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã" >> /var/log/auto_update.log
sudo apt update && sudo apt -o Dpkg::Options::="--force-confold" full-upgrade -y >> /var/log/auto_update.log 2>&1
EOF
fi
sudo chmod +x /usr/local/bin/auto_update.sh
if ! crontab -l 2>/dev/null | grep -q '/usr/local/bin/auto_update.sh'; then
  (crontab -l 2>/dev/null; echo "$AUTO_UPDATE_CRON /usr/local/bin/auto_update.sh") | sort -u | crontab -
else
  log "Cron-–∑–∞–¥–∞—á–∞ auto_update —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi


log "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É"
curl -fsSL https://raw.githubusercontent.com/Igrom4ek/Server_Setup/main/verify_install.sh -o /tmp/verify.sh
bash /tmp/verify.sh || true


log "üßπ –£–¥–∞–ª—è–µ–º install_user.sh"
rm -- "$0"

log "üßπ –£–¥–∞–ª—è–µ–º install_user.sh (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞)"
[[ -f "$0" && "$0" == "$HOME/install_user.sh" ]] && rm -f "$0"