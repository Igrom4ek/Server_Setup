#!/bin/bash
set -e

CONFIG_FILE="/usr/local/bin/config.json"
PUBKEY=$(jq -r '.public_key_content' "$CONFIG_FILE")
PORT=$(jq -r '.port' "$CONFIG_FILE")
SSH_DISABLE_ROOT=$(jq -r '.ssh_disable_root' "$CONFIG_FILE")
SSH_PASSWORD_AUTH=$(jq -r '.ssh_password_auth' "$CONFIG_FILE")
SUDO_NOPASSWD=$(jq -r '.sudo_nopasswd' "$CONFIG_FILE")
MONITORING_ENABLED=$(jq -r '.monitoring_enabled' "$CONFIG_FILE")
# –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram-–±–æ—Ç–∞ (—Ç–æ–∫–µ–Ω –∏ —á–∞—Ç ID –∏–∑ config.json)
BOT_TOKEN=$(jq -r '.telegram_bot_token' "$CONFIG_FILE")
CHAT_ID=$(jq -r '.telegram_chat_id' "$CONFIG_FILE")

USERNAME=$(whoami)
USER_HOME_DIR=$(getent passwd "$USERNAME" | cut -d: -f6)

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') | $1"
}

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ SSH
log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ ~/.ssh –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π"
mkdir -p ~/.ssh && chmod 700 ~/.ssh
touch ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys

log "üîë –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ SSH-–∫–ª—é—á–∞"
echo "$PUBKEY" > ~/.ssh/authorized_keys

log "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ /etc/ssh/sshd_config"
sudo sed -i "s/^#\?Port .*/Port $PORT/" /etc/ssh/sshd_config
if [[ "$SSH_DISABLE_ROOT" == "true" ]]; then
  sudo sed -i "s/^#\?PermitRootLogin .*/PermitRootLogin no/" /etc/ssh/sshd_config
fi
if [[ "$SSH_PASSWORD_AUTH" == "false" ]]; then
  sudo sed -i "s/^#\?PasswordAuthentication .*/PasswordAuthentication no/" /etc/ssh/sshd_config
fi

log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SSH"
sudo service ssh restart

log "üîì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo –±–µ–∑ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ)"
if [[ "$SUDO_NOPASSWD" == "true" ]]; then
  echo "$USERNAME ALL=(ALL) NOPASSWD: ALL" | sudo tee "/etc/sudoers.d/90-$USERNAME" > /dev/null
  sudo chmod 440 "/etc/sudoers.d/90-$USERNAME"
fi

log "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –±–æ—Ç–∞"

# 2. –°–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞—â–∏—Ç–∞: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
log "üõ° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∑–∞—â–∏—Ç—ã"
for SERVICE in ufw fail2ban psad rkhunter nmap; do
  if [[ "$(jq -r ".services.$SERVICE" "$CONFIG_FILE")" == "true" ]]; then
    sudo apt install -y "$SERVICE"
    if systemctl list-unit-files | grep -q "^$SERVICE.service"; then
      sudo systemctl enable --now "$SERVICE"
      log "$SERVICE –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    else
      log "$SERVICE –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç systemd ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ"
    fi
  else
    log "$SERVICE –æ—Ç–∫–ª—é—á—ë–Ω –≤ config.json"
  fi
done

log "üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rkhunter"
sudo rkhunter --propupd || true
# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ rkhunter
sudo tee /etc/systemd/system/rkhunter.service > /dev/null <<EOF
[Unit]
Description=Rootkit Hunter Service
After=network.target

[Service]
ExecStart=/usr/bin/rkhunter --cronjob --rwo
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF
sudo systemctl daemon-reload
sudo systemctl enable --now rkhunter.service
# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ rkhunter —á–µ—Ä–µ–∑ cron (1:00 –Ω–æ—á–∏)
echo "0 1 * * * root /usr/bin/rkhunter --check --cronjob --rwo" | sudo tee /etc/cron.d/rkhunter-daily > /dev/null

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker + Portainer
log "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∏ Portainer"
if ! command -v docker &> /dev/null; then
  log "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
  sudo apt update -y
  sudo apt install -y docker.io || log "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker"
  sudo systemctl enable --now docker && log "Docker –∑–∞–ø—É—â–µ–Ω"
else
  log "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v docker &> /dev/null; then
  if ! sudo docker container inspect portainer &> /dev/null; then
    log "Portainer –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Portainer..."
    sudo docker volume create portainer_data > /dev/null || true
    sudo docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always \
      -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data \
      portainer/portainer-ce:lts || log "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Portainer"
    if sudo docker ps -q -f name=portainer &> /dev/null; then
      log "Portainer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Web UI: https://$(hostname -I | awk '{print $1}'):9443)"
    fi
  else
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if ! sudo docker ps -q -f name=portainer > /dev/null; then
      sudo docker start portainer && log "Portainer –∑–∞–ø—É—â–µ–Ω" || log "‚ö†Ô∏è Portainer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å"
    fi
    log "Portainer —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  fi
fi

# 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Netdata (–≤ Docker, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—Ç–∏–≤–Ω–æ)
if [[ "$MONITORING_ENABLED" == "true" ]]; then
  log "üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Netdata"
  if command -v netdata &> /dev/null; then
    log "Netdata —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker-–≤–µ—Ä—Å–∏–∏"
  elif ! sudo docker container inspect netdata &> /dev/null; then
    log "Netdata –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ Netdata –≤ Docker..."
    sudo docker run -d --name=netdata \
      --hostname="$(hostname)" \
      --pid=host \
      --network=host \
      -v netdataconfig:/etc/netdata \
      -v netdatalib:/var/lib/netdata \
      -v netdatacache:/var/cache/netdata \
      -v /etc/passwd:/host/etc/passwd:ro \
      -v /etc/group:/host/etc/group:ro \
      -v /etc/os-release:/host/etc/os-release:ro \
      -v /proc:/host/proc:ro \
      -v /sys:/host/sys:ro \
      -v /var/run/docker.sock:/var/run/docker.sock:ro \
      --restart unless-stopped \
      --cap-add SYS_PTRACE --cap-add SYS_ADMIN \
      --security-opt apparmor=unconfined \
      netdata/netdata || log "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Netdata –≤ Docker"
  else
    log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Netdata —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
  fi
else
  log "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Netdata –æ—Ç–∫–ª—é—á—ë–Ω –≤ config.json"
fi

# 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
log "ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞"
sudo tee /usr/local/bin/telegram_command_listener.sh > /dev/null <<EOF
#!/bin/bash
export HOME="$USER_HOME_DIR"
TOKEN="$BOT_TOKEN"
CHAT_ID="$CHAT_ID"
OFFSET_FILE="\$HOME/.cache/telegram_bot_offset"
LAST_COMMAND_FILE="\$HOME/.cache/telegram_last_command"
REBOOT_FLAG_FILE="\$HOME/.cache/telegram_confirm_reboot"
LOG_FILE="/tmp/bot_debug.log"

mkdir -p "\$(dirname "\$OFFSET_FILE")"
exec >>"\$LOG_FILE" 2>&1
set -x

OFFSET=\$(cat "\$OFFSET_FILE" 2>/dev/null || echo 0)

send_message() {
  local text="\$1"
  curl -s -X POST "https://api.telegram.org/bot\${TOKEN}/sendMessage" \
    --data-urlencode chat_id="\${CHAT_ID}" \
    --data-urlencode parse_mode="Markdown" \
    --data-urlencode text="\${text}" > /dev/null
}

get_updates() {
  curl -s "https://api.telegram.org/bot\$TOKEN/getUpdates?offset=\$OFFSET"
}

while true; do
  RESPONSE=\$(get_updates)
  UPDATES=\$(echo "\$RESPONSE" | jq -c '.result')
  LENGTH=\$(echo "\$UPDATES" | jq 'length')
  [[ "\$LENGTH" -eq 0 ]] && sleep 2 && continue

  for ((i = 0; i < \$LENGTH; i++)); do
    UPDATE=\$(echo "\$UPDATES" | jq -c ".[\$i]")
    UPDATE_ID=\$(echo "\$UPDATE" | jq '.update_id')
    MESSAGE=\$(echo "\$UPDATE" | jq -r '.message.text')
    OFFSET=\$((UPDATE_ID + 1))
    echo "\$OFFSET" > "\$OFFSET_FILE"

    NOW=\$(date +%s)
    LAST_CMD=\$(cat "\$LAST_COMMAND_FILE" 2>/dev/null || echo "0")
    DIFF=\$((NOW - LAST_CMD))
    [[ "\$DIFF" -lt 3 ]] && continue
    echo "\$NOW" > "\$LAST_COMMAND_FILE"

    case "\$MESSAGE" in
      /help | help)
        send_message "*–ö–æ–º–∞–Ω–¥—ã:*
/uptime ‚Äî –∞–ø—Ç–∞–π–º
/disk ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
/mem ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
/top ‚Äî —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
/who ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/ip ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–Ω–µ—à–Ω–∏–π IP + –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
/security ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã (rkhunter, psad)
/reboot ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
/confirm_reboot ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
/restart_bot ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/botlog ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞"
        ;;
      /uptime)
        send_message "*–ê–ø—Ç–∞–π–º:* \$(uptime -p)"
        ;;
      /disk)
        send_message "\`\`\`
\$(df -h /)
\`\`\`"
        ;;
      /mem)
        send_message "\`\`\`
\$(free -h)
\`\`\`"
        ;;
      /top)
        send_message "\`\`\`
\$(ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head -n 10)
\`\`\`"
        ;;
      /who)
        WHO_WITH_GEO=""
        while read -r user tty date time ip; do
          IP_ADDR=\$(echo "\$ip" | tr -d '()')
          GEO=\$(curl -s ipinfo.io/\$IP_ADDR | jq -r '.city + ", " + .region + ", " + .country + " (" + .org + ")"')
          WHO_WITH_GEO+="üë§ \$user ‚Äî \$IP_ADDR
üåç \$GEO

"
        done <<< "\$(who | awk '{print \$1, \$2, \$3, \$4, \$5}')"
        send_message "*–°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*

\$WHO_WITH_GEO"
        ;;
      /ip)
        IP_INT=\$(hostname -I | awk '{print \$1}')
        IP_EXT=\$(curl -s ifconfig.me)
        GEO=\$(curl -s ipinfo.io/\$IP_EXT | jq -r '.city + ", " + .region + ", " + .country + " (" + .org + ")"')
        send_message "*–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP:* \`\$IP_INT\`
*–í–Ω–µ—à–Ω–∏–π IP:* \`\$IP_EXT\`
üåç *–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:* \$GEO"
        ;;
      /security)
        send_message "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (rkhunter, psad)..."
        echo "[BOT] –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è rkhunter..." >> "\$LOG_FILE"
        OUT=\$(timeout 30s sudo rkhunter --check --sk --nocolors --rwo)
        EXIT_CODE=\$?
        if [[ "\$EXIT_CODE" -eq 124 ]]; then
          RKHUNTER_RESULT="‚ö†Ô∏è rkhunter –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
        else
          RKHUNTER_RESULT=\$(echo "\$OUT" | tail -n 100)
        fi
        if [[ -f /var/log/psad/alert ]]; then
          PSAD_RESULT=\$(grep "Danger level" /var/log/psad/alert | tail -n 5)
          [[ -z "\$PSAD_RESULT" ]] && PSAD_RESULT="psad –ª–æ–≥ –ø—É—Å—Ç"
        else
          PSAD_RESULT="psad –ª–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        fi
        PSAD_STATUS=\$(sudo psad -S | head -n 20 || echo "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ psad -S")
        TOP_IPS=\$(sudo grep -i "Danger level" /var/log/psad/alert | tail -n 10 || echo "")
        [[ -z "\$TOP_IPS" ]] && TOP_IPS="–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö."

        send_message "*RKHunter (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏):*
\`\`\`
\$RKHUNTER_RESULT
\`\`\`

*PSAD:*
\`\`\`
\$PSAD_RESULT
\`\`\`"
        send_message "*–°—Ç–∞—Ç—É—Å PSAD:*
\`\`\`
\$PSAD_STATUS
\`\`\`"
        send_message "*–¢–æ–ø 10 IP-–∞–¥—Ä–µ—Å–æ–≤ (PSAD):*
\`\`\`
\$TOP_IPS
\`\`\`"
        ;;
      /reboot)
        echo "1" > "\$REBOOT_FLAG_FILE"
        send_message "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π */confirm_reboot*"
        ;;
      /confirm_reboot)
        if [[ -f "\$REBOOT_FLAG_FILE" ]]; then
          send_message "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
          rm -f "\$REBOOT_FLAG_FILE"
          sleep 2
          sudo reboot
        else
          send_message "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É."
        fi
        ;;
      /restart_bot)
        send_message "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞..."
        sleep 1
        sudo systemctl restart telegram_command_listener.service
        exit 0
        ;;
      /botlog)
        LOG=\$(tail -n 30 "\$LOG_FILE" 2>/dev/null || echo "–õ–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        send_message "*–õ–æ–≥ –±–æ—Ç–∞:*
\`\`\`
\$LOG
\`\`\`"
        ;;
      *)
        send_message "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞."
        ;;
    esac
  done
  sleep 2
done
EOF

sudo chmod +x /usr/local/bin/telegram_command_listener.sh

# –°–æ–∑–¥–∞–Ω–∏–µ systemd unit –¥–ª—è –±–æ—Ç–∞
sudo tee /etc/systemd/system/telegram_command_listener.service > /dev/null <<EOF
[Unit]
Description=Telegram Command Listener Bot Service
After=network.target

[Service]
ExecStart=/usr/local/bin/telegram_command_listener.sh
Restart=always
User=$USERNAME

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
sudo systemctl enable --now telegram_command_listener.service

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö —á–µ—Ä–µ–∑ PAM
log "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—Ö–æ–¥–µ –ø–æ SSH"
sudo tee /usr/local/bin/telegram_ssh_notify.sh > /dev/null <<EOF
#!/bin/bash
[[ "\$PAM_TYPE" != "open_session" ]] && exit 0
[[ -z "\$PAM_USER" || "\$PAM_USER" == "sshd" ]] && exit 0

TOKEN="$BOT_TOKEN"
CHAT_ID="$CHAT_ID"

USER="\$PAM_USER"
IP=\$(echo \$SSH_CONNECTION | awk '{print \$1}')
CACHE_FILE="/tmp/ssh_notify_\${USER}_\${IP}"

# –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
if [[ -f "\$CACHE_FILE" ]]; then
  LAST_TIME=\$(cat "\$CACHE_FILE")
  NOW=\$(date +%s)
  DIFF=\$((NOW - LAST_TIME))
  if [[ "\$DIFF" -lt 10 ]]; then
    exit 0
  fi
fi

date +%s > "\$CACHE_FILE"

GEO=\$(curl -s ipinfo.io/\$IP | jq -r '.city + ", " + .region + ", " + .country + " (" + .org + ")"')
TEXT="üîê SSH –≤—Ö–æ–¥: *\$USER*
üì° IP: \`\$IP\`
üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: \$GEO
üïí –í—Ä–µ–º—è: \$(date +'%Y-%m-%d %H:%M:%S')"

curl -s -X POST "https://api.telegram.org/bot\$TOKEN/sendMessage" \
  -d chat_id="\$CHAT_ID" -d parse_mode="Markdown" -d text="\$TEXT" > /dev/null
EOF

sudo chmod +x /usr/local/bin/telegram_ssh_notify.sh

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∫ PAM
if ! grep -q "telegram_ssh_notify.sh" /etc/pam.d/sshd; then
  echo "session optional pam_exec.so /usr/local/bin/telegram_ssh_notify.sh" | sudo tee -a /etc/pam.d/sshd > /dev/null
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è psad –∏ iptables
log "üß± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è psad –∏ iptables"
sudo iptables -C INPUT -j LOG 2>/dev/null || sudo iptables -A INPUT -j LOG
sudo iptables -C FORWARD -j LOG 2>/dev/null || sudo iptables -A FORWARD -j LOG

if ! grep -q "psad" /etc/rsyslog.conf; then
  echo ':msg, contains, "psad" /var/log/psad/alert' | sudo tee -a /etc/rsyslog.conf > /dev/null
  echo '& stop' | sudo tee -a /etc/rsyslog.conf > /dev/null
  sudo systemctl restart rsyslog
fi

if grep -q "IPT_SYSLOG_FILE" /etc/psad/psad.conf; then
  sudo sed -i "s|^IPT_SYSLOG_FILE.*|IPT_SYSLOG_FILE             /var/log/kern.log;|" /etc/psad/psad.conf
  sudo systemctl restart psad
  log "psad —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo –¥–ª—è rkhunter (–±–µ–∑ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –±–æ—Ç–æ–º)
log "üõ° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo –¥–ª—è rkhunter (–±–µ–∑ –ø–∞—Ä–æ–ª—è –¥–ª—è –±–æ—Ç–∞)"
if ! sudo grep -q "/usr/bin/rkhunter" /etc/sudoers; then
  echo "$USERNAME ALL=(ALL) NOPASSWD: /usr/bin/rkhunter" | sudo tee -a /etc/sudoers > /dev/null
  log "–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ sudoers –¥–ª—è rkhunter"
else
  log "–ü—Ä–∞–≤–∏–ª–æ sudoers –¥–ª—è rkhunter —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ"
fi

# 6. –§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç
log "üì¨ –§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
CHECKLIST="/tmp/install_checklist.txt"

# –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞
echo "–ß–µ–∫–ª–∏—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏:" > "$CHECKLIST"
echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $USERNAME" >> "$CHECKLIST"
echo "SSH –ø–æ—Ä—Ç: $PORT" >> "$CHECKLIST"
echo "–°–ª—É–∂–±—ã:" >> "$CHECKLIST"
for SERVICE in ufw fail2ban psad rkhunter; do
  sudo systemctl is-active --quiet "$SERVICE" && echo "  [+] $SERVICE" >> "$CHECKLIST" || echo "  [ ] $SERVICE" >> "$CHECKLIST"
done
echo "Telegram-–±–æ—Ç: –≤–∫–ª—é—á—ë–Ω" >> "$CHECKLIST"
if command -v docker &> /dev/null; then
  echo "Docker: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" >> "$CHECKLIST"
  if sudo docker ps -q -f name=portainer &> /dev/null; then
    echo "Portainer: https://$(hostname -I | awk '{print $1}'):9443" >> "$CHECKLIST"
  else
    echo "Portainer: –Ω–µ –∑–∞–ø—É—â–µ–Ω" >> "$CHECKLIST"
  fi
else
  echo "Docker: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" >> "$CHECKLIST"
fi
if [[ "$MONITORING_ENABLED" == "true" ]]; then
  if command -v netdata &> /dev/null; then
    echo "Netdata: http://$(hostname -I | awk '{print $1}'):19999 (–≤ —Å–∏—Å—Ç–µ–º–µ)" >> "$CHECKLIST"
  elif sudo docker ps -q -f name=netdata &> /dev/null; then
    echo "Netdata: http://$(hostname -I | awk '{print $1}'):19999 (Docker)" >> "$CHECKLIST"
  else
    echo "Netdata: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏" >> "$CHECKLIST"
  fi
else
  echo "Netdata: –æ—Ç–∫–ª—é—á–µ–Ω–∞" >> "$CHECKLIST"
fi
if [[ "$(jq -r '.services.rkhunter' "$CONFIG_FILE")" == "true" ]]; then
  RKHUNTER_OUTPUT=$(sudo rkhunter --check --sk --nocolors --rwo 2>/dev/null || true)
  if [[ -n "$RKHUNTER_OUTPUT" ]]; then
    echo "RKHunter: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:" >> "$CHECKLIST"
    RKHUNTER_LAST=$(echo "$RKHUNTER_OUTPUT" | tail -n 10)
    echo "$RKHUNTER_LAST" >> "$CHECKLIST"
  else
    echo "RKHunter: OK (–Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ)" >> "$CHECKLIST"
  fi
fi
if [[ "$(jq -r '.services.psad' "$CONFIG_FILE")" == "true" ]]; then
  if [[ -f /var/log/psad/alert ]]; then
    PSAD_ALERTS=$(sudo grep "Danger level" /var/log/psad/alert | tail -n 5 || true)
    if [[ -n "$PSAD_ALERTS" ]]; then
      echo "PSAD: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:" >> "$CHECKLIST"
      echo "$PSAD_ALERTS" >> "$CHECKLIST"
    else
      echo "PSAD: OK (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ)" >> "$CHECKLIST"
    fi
  else
    echo "PSAD: OK (–ª–æ–≥ –ø—É—Å—Ç)" >> "$CHECKLIST"
  fi
fi

# –í—ã–≤–æ–¥–∏–º —á–µ–∫-–ª–∏—Å—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
cat "$CHECKLIST"

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫-–ª–∏—Å—Ç –≤ Telegram
CHECK_MSG=$(sed 's/`/\\`/g' "$CHECKLIST")
curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
  -d chat_id="$CHAT_ID" -d parse_mode="Markdown" \
  --data-urlencode text="\`\`\`$CHECK_MSG\`\`\`" > /dev/null

rm -f "$CHECKLIST"

# 7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron-–∑–∞–¥–∞—á (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ—á–∏—Å—Ç–∫–∞)
log "üïí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron-–∑–∞–¥–∞—á: –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (rkhunter + psad) —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º –≤ Telegram
sudo tee /usr/local/bin/cron_security_check.sh > /dev/null <<EOF
#!/bin/bash
LOG_FILE="/var/log/security_monitor.log"
BOT_TOKEN="$BOT_TOKEN"
CHAT_ID="$CHAT_ID"

send_telegram() {
    MESSAGE="\$1"
    curl -s -X POST "https://api.telegram.org/bot\${BOT_TOKEN}/sendMessage" -d chat_id="\${CHAT_ID}" -d parse_mode="Markdown" --data-urlencode text="\${MESSAGE}" > /dev/null
}

timestamp() {
    date '+%Y-%m-%d %H:%M:%S'
}
echo "\$(timestamp) | üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" >> "\$LOG_FILE"

RKHUNTER_RESULT=\$(sudo rkhunter --check --sk --nocolors --rwo 2>/dev/null || true)
if [ -n "\$RKHUNTER_RESULT" ]; then
    send_telegram "‚ö†Ô∏è *RKHunter –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:*\n\`\`\`\n\$RKHUNTER_RESULT\n\`\`\`"
    echo "\$(timestamp) | ‚ö†Ô∏è RKHunter: –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è" >> "\$LOG_FILE"
else
    send_telegram "‚úÖ *RKHunter*: –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    echo "\$(timestamp) | ‚úÖ RKHunter: –≤—Å—ë —á–∏—Å—Ç–æ" >> "\$LOG_FILE"
fi

PSAD_ALERTS=\$(sudo grep "Danger level" /var/log/psad/alert | tail -n 5 || true)
if echo "\$PSAD_ALERTS" | grep -q "Danger level"; then
    send_telegram "üö® *PSAD –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:*\n\`\`\`\n\$PSAD_ALERTS\n\`\`\`"
    echo "\$(timestamp) | üö® PSAD: –Ω–∞–π–¥–µ–Ω—ã —É–≥—Ä–æ–∑—ã" >> "\$LOG_FILE"
else
    send_telegram "‚úÖ *PSAD*: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    echo "\$(timestamp) | ‚úÖ PSAD: –≤—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ" >> "\$LOG_FILE"
fi
echo "\$(timestamp) | ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" >> "\$LOG_FILE"
EOF

sudo chmod +x /usr/local/bin/cron_security_check.sh
echo "0 7 * * * root /usr/local/bin/cron_security_check.sh" | sudo tee /etc/cron.d/cron-security-check > /dev/null

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
sudo tee /usr/local/bin/cron_clear_security_log.sh > /dev/null <<EOF
#!/bin/bash
LOG_FILE="/var/log/security_monitor.log"
echo "\$(date '+%Y-%m-%d %H:%M:%S') | –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)" > "\$LOG_FILE"
EOF

sudo chmod +x /usr/local/bin/cron_clear_security_log.sh
echo "0 6 * * 1 root /usr/local/bin/cron_clear_security_log.sh" | sudo tee /etc/cron.d/cron-clear-security-log > /dev/null

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –æ—Ç—á—ë—Ç–æ–º –≤ Telegram
sudo tee /usr/local/bin/cron_weekly_update.sh > /dev/null <<EOF
#!/bin/bash
LOG_FILE="/var/log/weekly_update.log"
BOT_TOKEN="$BOT_TOKEN"
CHAT_ID="$CHAT_ID"

send_telegram() {
    local MESSAGE="\$1"
    curl -s -X POST "https://api.telegram.org/bot\${BOT_TOKEN}/sendMessage" \\
         -d chat_id="\${CHAT_ID}" -d parse_mode="Markdown" \\
         --data-urlencode text="\${MESSAGE}" > /dev/null
}

log_and_echo() {
    echo "\$1" | tee -a "\$LOG_FILE"
}

log_and_echo "üïñ ===== \$(date '+%Y-%m-%d %H:%M:%S') | –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ====="
apt update >> "\$LOG_FILE" 2>&1
apt upgrade -y >> "\$LOG_FILE" 2>&1
apt full-upgrade -y >> "\$LOG_FILE" 2>&1
apt autoremove -y >> "\$LOG_FILE" 2>&1
apt autoclean >> "\$LOG_FILE" 2>&1
log_and_echo "‚úÖ \$(date '+%Y-%m-%d %H:%M:%S') | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
log_and_echo ""

TAIL_LOG=\$(tail -n 40 "\$LOG_FILE")
send_telegram "üß∞ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:*
\`\`\`
\${TAIL_LOG}
\`\`\`"
EOF

sudo chmod +x /usr/local/bin/cron_weekly_update.sh
echo "30 5 * * 1 root /usr/local/bin/cron_weekly_update.sh" | sudo tee /etc/cron.d/cron-weekly-update > /dev/null

log "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
